[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\rodrigo.d.baraglia\AppData\Local\Temp\idea4.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\rodrigo.d.baraglia\AppData\Local\Temp\idea4.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.6 (Oracle Corporation Java 15.0.1)
[debug]       Load.loadUnit: plugins took 96.7058ms
[debug]       Load.loadUnit: defsScala took 0.2672ms
[debug] [Loading] Scanning directory C:\Users\rodrigo.d.baraglia\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\rodrigo.d.baraglia\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.8802 ms
[debug]           Load.resolveProject(global-plugins) took 37.5346ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\rodrigo.d.baraglia\.sbt\1.0\plugins, plugins: List(<none>))) took 74.865ms
[debug] [Loading] Done in C:\Users\rodrigo.d.baraglia\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 94.13ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2164ms
[debug]     Load.loadUnit(file:/C:/Users/rodrigo.d.baraglia/.sbt/1.0/plugins/, ...) took 201.7416ms
[debug]   Load.apply: load took 375.666ms
[debug]   Load.apply: resolveProjects took 5.278ms
[debug]   Load.apply: finalTransforms took 59.7071ms
[debug]   Load.apply: config.delegates took 8.0744ms
[debug]   Load.apply: Def.make(settings)... took 2653.9692ms
[debug]   Load.apply: structureIndex took 92.2649ms
[debug]   Load.apply: mkStreams took 1.7681ms
[info] loading global plugins from C:\Users\rodrigo.d.baraglia\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5113.6622ms
[debug]           Load.loadUnit: plugins took 39.3995ms
[debug]           Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\rodrigo.d.baraglia\Documents\scalastuff\myrepl\project
[debug]             Load.loadUnit: mkEval took 5.5309ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\rodrigo.d.baraglia\Documents\scalastuff\myrepl\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.275 ms
[info] loading settings for project myrepl-build from idea4.sbt ...
[debug]               Load.resolveProject(myrepl-build) took 3.854ms
[debug]             Load.loadTransitive: finalizeProject(Project(id myrepl-build, base: C:\Users\rodrigo.d.baraglia\Documents\scalastuff\myrepl\project, plugins: List(<none>))) took 6.8848ms
[debug] [Loading] Done in C:\Users\rodrigo.d.baraglia\Documents\scalastuff\myrepl\project, returning: (myrepl-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 126.3704ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.1362ms
[debug]         Load.loadUnit(file:/C:/Users/rodrigo.d.baraglia/Documents/scalastuff/myrepl/project/, ...) took 175.0389ms
[debug]       Load.apply: load took 176.8888ms
[debug]       Load.apply: resolveProjects took 0.1377ms
[debug]       Load.apply: finalTransforms took 11.4379ms
[debug]       Load.apply: config.delegates took 0.4946ms
[debug]       Load.apply: Def.make(settings)... took 95.6557ms
[debug]       Load.apply: structureIndex took 37.2456ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\rodrigo.d.baraglia\Documents\scalastuff\myrepl\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 667.9862ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\rodrigo.d.baraglia\Documents\scalastuff\myrepl
[debug]       Load.loadUnit: mkEval took 0.2873ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\rodrigo.d.baraglia\Documents\scalastuff\myrepl, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.9267 ms
[info] loading settings for project myrepl from build.sbt ...
[debug]         Load.resolveProject(myrepl) took 37.0674ms
[debug]       Load.loadTransitive: finalizeProject(Project(id myrepl, base: C:\Users\rodrigo.d.baraglia\Documents\scalastuff\myrepl, plugins: List(<none>))) took 40.0002ms
[debug] [Loading] Done in C:\Users\rodrigo.d.baraglia\Documents\scalastuff\myrepl, returning: (myrepl)
[debug]     Load.loadUnit: loadedProjectsRaw took 93.9279ms
[debug]     Load.loadUnit: cleanEvalClasses took 14.0681ms
[debug]   Load.loadUnit(file:/C:/Users/rodrigo.d.baraglia/Documents/scalastuff/myrepl/, ...) took 776.8998ms
[debug] Load.apply: load took 778.6807ms
[debug] Load.apply: resolveProjects took 0.1448ms
[debug] Load.apply: finalTransforms took 24.4869ms
[debug] Load.apply: config.delegates took 0.4444ms
[debug] Load.apply: Def.make(settings)... took 87.189ms
[debug] Load.apply: structureIndex took 25.5881ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to myrepl (in build file:/C:/Users/rodrigo.d.baraglia/Documents/scalastuff/myrepl/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60212 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60212, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to myrepl (in build file:/C:/Users/rodrigo.d.baraglia/Documents/scalastuff/myrepl/)
[debug] > Exec(idea-shell, None, None)
